diff --git a/src/iotjs.c b/src/iotjs.c
index e204f59..01347ab 100644
--- a/src/iotjs.c
+++ b/src/iotjs.c
@@ -28,6 +28,7 @@
 #include "jerryscript.h"
 
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
 
 
@@ -186,7 +187,11 @@ static jerry_value_t dummy_wait_for_client_source_cb() {
   return jerry_create_undefined();
 }
 
-int iotjs_entry(int argc, char** argv) {
+static int argc;
+static char **argv;
+
+static int __attribute__ ((noinline))
+iotjs_entry_main(void) {
   int ret_code = 0;
 
   // Initialize IoT.js
@@ -252,3 +257,62 @@ terminate:;
   }
   return ret_code;
 }
+
+#define PATTERN (0xfe)
+#define STACK_MEASURE_RANGE (8 * 1024 * 1024)
+
+uint8_t stack[STACK_MEASURE_RANGE] __attribute__((aligned(16)));
+
+static void
+end_stack_measurement(void)
+{
+  uint8_t *stack_p = stack;
+  uint8_t *stack_end_p = stack + STACK_MEASURE_RANGE;
+
+  while(stack_p < stack_end_p)
+  {
+    if(*stack_p != PATTERN)
+    {
+      break;
+    }
+    stack_p++;
+  }
+
+  printf("Stack usage: %d\n", (int) (stack_end_p - stack_p));
+}
+
+int __attribute__ ((noinline))
+iotjs_entry(int argc_, char **argv_)
+{
+  uint8_t *stack_p;
+  uint8_t *stack_end_p;
+  int ret_code;
+
+  argc = argc_;
+  argv = argv_;
+
+  stack_p = stack;
+  stack_end_p = stack + STACK_MEASURE_RANGE;
+
+  while(stack_p < stack_end_p)
+  {
+    *stack_p = PATTERN;
+    stack_p++;
+  }
+
+  // Save the current point of the stack pointer and
+  // modify that to point the custom stack.
+  __asm volatile ("mov %[orig_stack], sp;"
+                  "mov sp, %[custom_stack];"
+                  : [orig_stack] "=r" (stack_p)
+                  : [custom_stack] "r" (stack_end_p));
+
+  ret_code = iotjs_entry_main();
+
+  // Restore the stack pointer to the original value.
+  __asm volatile ("mov sp, %0" : : "r" (stack_p));
+
+  end_stack_measurement();
+
+  return ret_code;
+}
