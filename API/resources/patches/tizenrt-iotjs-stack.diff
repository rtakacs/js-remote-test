diff --git a/src/platform/tizenrt/iotjs_main_tizenrt.c b/src/platform/tizenrt/iotjs_main_tizenrt.c
index bcf0243..7626aa5 100644
--- a/src/platform/tizenrt/iotjs_main_tizenrt.c
+++ b/src/platform/tizenrt/iotjs_main_tizenrt.c
@@ -104,6 +104,7 @@ void longjmp(jmp_buf buf, int value) {
 int iotjs_entry(int argc, char **argv);
 int tuv_cleanup(void);
 
+#define PATTERN (0xfe)
 
 #if USE_IOTJS_THREAD
 struct iotjs_thread_arg {
@@ -114,14 +115,54 @@ struct iotjs_thread_arg {
 pthread_addr_t iotjs_thread(void *thread_arg) {
   struct iotjs_thread_arg *arg = thread_arg;
 
-#ifdef CONFIG_DEBUG_VERBOSE
+  FILE *fp;
+  char fname[32];
+  uint8_t stack_info[64];
+  unsigned long size;
+  unsigned long base;
+  unsigned long stack_ptr;
+  size_t file_size;
+
+  /*
+   * Content of /proc/<pid>/stack:
+   * StackBase:  0x2001a368
+   * StackSize:  16364
+   */
+
+  sprintf(fname, "/proc/%d/stack", getpid());
+  fp = fopen(fname, "r");
+  if (!fp) {
+    printf("Couldn't open %s!\n", fname);
+    return NULL;
+  }
+
+  /* Extract stack info */
+  file_size = fread(stack_info, 1, 63, fp);
+  stack_info[file_size] = '\0';
+  fclose(fp);
+
+  sscanf((const char *)stack_info, "StackBase:  0x%lx\nStackSize:  %ld", &base, &size);
+  uint8_t *end = (uint8_t *)(base - size + 4);
+
+  /* Stack coloration */
+  asm("mov %0, sp" : "=r" (stack_ptr));
+  memset(end, PATTERN, (stack_ptr - (unsigned long)end));
+
+  /* Run IoT.js */
   int ret = iotjs_entry(arg->argc, arg->argv);
   printf("IoT.js Result: %d\n", ret);
-#else
-  iotjs_entry(arg->argc, arg->argv);
-#endif
+
   tuv_cleanup();
 
+  /* Check max stack usage */
+  uint8_t *stack_p = end;
+
+  while (*stack_p == PATTERN) {
+    stack_p++;
+  }
+
+  printf ("Stack usage: %d\n", (int) (base - (unsigned long)stack_p));
+
   sleep(1);
   return NULL;
 }
